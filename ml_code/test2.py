from kinect_quat_functions_nocv import abs2relquat, rel2absquat
import cv2
from kinect_quat_functions import quat2vector, vector2screen
import numpy as np


files = ["./test_estimate.txt"]
for file in files:
	quats = []
	quat = []
	with open(file) as quat_file:
		for line in quat_file:
			line = line.strip()
			if line[0]=='t':
				if (quat != []):
					quats.append(quat)
					# print(quats)
					# time.sleep(2)
				quat = []
				line = line[9:-1] # remove tensor([ and ending comma
			elif line[-2]==']':
				line = line[:-3] # remove ])
			elif line[0]=='d':
				continue
			else:
				line = line[:-1]
			line = line.split(",")
			digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-']
			for l in line:
				try:
					quat.append(float(l.strip()))
				except:
					# print(l)
					if l.strip()[0]=='d':
						continue
					if len(l)==0:
						continue
					else:
						while l[0] not in digits:
							l=l[1:]
							if len(l)==0:
								break
						if len(l)==0:
							break
						while l[-1] not in digits:
							l=l[:-1]
							if len(l)==0:
								break
						# l = l.strip()
						# l = l[:-2]
						quat.append(float(l.strip()))
	quats.append(quat)

	print("done extracting quats")

	quat_file.close()
# quats = torch.Tensor(quats)
# print(len(quats))
# print(len(quats[0]))
new_quats = []
count = 0
single = []
for body in quats[0]:
	if count%4==0:
		if count >0:
			new_quats.append(single)
			single = []
	single.append(body)
	count +=1
new_quats.append(single)

new = []
single = []
count = 0
for body in new_quats:
	if count%25==0:
		if count >0:
			new.append(single)
			single = []
	single.append(body)
	count +=1
new.append(single)
# new.append(new_quats)
	# new_quats = []
# print(len(new))
# print(len(new[0]))
# print(len(new[0][0]))

# start_quat = [ #IA DW1 503
# (0.0, 0.0, 0.0, 0.0),
# (-0.04246267303824425, 0.9979426860809326, 0.0356350913643837, -0.032210011035203934),
# (-0.04057622328400612, 0.9969627261161804, 0.05762607976794243, -0.03313834220170975),
# (-0.03827853500843048, 0.9946541786193848, 0.07187400758266449, -0.06349731236696243),
# (-0.04036831483244896, 0.9923662543296814, 0.07072141766548157, -0.0926176905632019),
# (0.6259497404098511, 0.7750303745269775, 0.08600489795207977, -0.010867989622056484),
# (0.8160269260406494, -0.5663284063339233, -0.10661493986845016, 0.04478256404399872),
# (0.6116636395454407, 0.7370321750640869, -0.14625492691993713, -0.2475091516971588),
# (0.7184550762176514, -0.6806216835975647, 0.030664101243019104, -0.1401287019252777),
# (0.8144869804382324, -0.03534862771630287, 0.5595877766609192, -0.14907319843769073),
# (0.4560256600379944, -0.4964819848537445, 0.7191545367240906, -0.16841310262680054),
# (-0.48415902256965637, 0.6002576351165771, -0.6273357272148132, 0.10830844193696976),
# (0.0, 0.0, 0.0, 0.0),
# (0.0, 0.0, 0.0, 0.0),
# (0.872873842716217, 0.09946288913488388, -0.37463560700416565, -0.2963891923427582),
# (0.10778523236513138, -0.45753213763237, 0.838504433631897, -0.2756030261516571),
# (0.046796999871730804, -0.5665172338485718, 0.7200593948364258, -0.39797312021255493),
# (0.0, 0.0, 0.0, 0.0),
# (0.0, 0.0, 0.0, 0.0),
# (-0.48862341046333313, 0.4455340802669525, -0.5020152926445007, 0.5574290752410889),
# (0.742738664150238, 0.08381194621324539, 0.6633076667785645, 0.03657448664307594),
# (0.0, 0.0, 0.0, 0.0),
# (-0.4480212330818176, -0.4590829312801361, 0.5030765533447266, 0.5791664719581604),
# (-0.6885574460029602, 0.011318947188556194, 0.7243511080741882, 0.03280230611562729),
# (0.0, 0.0, 0.0, 0.0)
# ]

start_quat = [ #IA DW1 511

(0.0, 0.0, 0.0, 0.0),
(-0.04707345366477966, 0.9928267598152161, 0.0916907787322998, -0.06059674173593521),
(-0.050773657858371735, 0.981590211391449, 0.1726224720478058, -0.06406333297491074),
(-0.05271880328655243, 0.9828792810440063, 0.15587393939495087, -0.0828995332121849),
(-0.055708423256874084, 0.9811021089553833, 0.15483064949512482, -0.10179711878299713),
(0.6097254753112793, 0.7680047750473022, 0.17346587777137756, -0.09117614477872849),
(0.7949207425117493, -0.5663865208625793, -0.2174895852804184, 0.0023715635761618614),
(0.6274937391281128, 0.7045024633407593, -0.12439727038145065, -0.30733251571655273),
(0.7008910775184631, -0.6823100447654724, -0.025989053770899773, -0.20622630417346954),
(0.8269293904304504, -0.024939406663179398, 0.5411424040794373, -0.1507667601108551),
(0.8078917264938354, 0.04719074070453644, -0.29903674125671387, -0.5056294202804565),
(-0.571729838848114, 0.08838000148534775, 0.4037308394908905, 0.708742082118988),
(0.0, 0.0, 0.0, 0.0),
(0.0, 0.0, 0.0, 0.0),
(0.8546380400657654, 0.021953344345092773, -0.467999666929245, -0.22380392253398895),
(-0.3276265561580658, -0.5377433896064758, 0.776140034198761, 0.033159371465444565),
(0.3741157352924347, 0.7144322395324707, -0.588370680809021, 0.05868496000766754),
(0.0, 0.0, 0.0, 0.0),
(0.0, 0.0, 0.0, 0.0),
(-0.48251697421073914, 0.4210188090801239, -0.5229143500328064, 0.5625665783882141),
(0.7528988122940063, 0.11099760979413986, 0.6421276330947876, 0.09216790646314621),
(0.0, 0.0, 0.0, 0.0),
(-0.4309995472431183, -0.43326467275619507, 0.5260026454925537, 0.5914748311042786),
(-0.6685120463371277, 0.024979878216981888, 0.7431969046592712, 0.01122257299721241),
(0.0, 0.0, 0.0, 0.0)
]
quat523=[
(0.0, 0.0, 0.0, 0.0),
(-0.043671127408742905, 0.9934070706367493, 0.09298054873943329, -0.05088963732123375),
(-0.05026879906654358, 0.988684892654419, 0.13140803575515747, -0.05203019455075264),
(-0.05385955050587654, 0.9811245799064636, 0.16993381083011627, -0.07494192570447922),
(-0.05745959281921387, 0.9793098568916321, 0.16875053942203522, -0.0957803726196289),
(0.6167751550674438, 0.7710679173469543, 0.14721272885799408, -0.05806050822138786),
(0.8042399883270264, -0.5659787058830261, -0.17996083199977875, 0.021912377327680588),
(0.6206248998641968, 0.7096885442733765, -0.11097836494445801, -0.3144051730632782),
(0.7095484137535095, -0.6687377691268921, -0.02832886390388012, -0.22029128670692444),
(0.8327422738075256, -0.026022857055068016, 0.534562349319458, -0.14179600775241852),
(0.860197901725769, -0.13729386031627655, -0.01597135327756405, -0.4908715486526489),
(0.6603731513023376, -0.31955257058143616, -0.15957535803318024, -0.6605521440505981),
(0.0, 0.0, 0.0, 0.0),
(0.0, 0.0, 0.0, 0.0),
(0.8582645654678345, 0.01002351101487875, -0.46489736437797546, -0.21714498102664948),
(-0.23671838641166687, -0.5416824817657471, 0.8056447505950928, -0.038483552634716034),
(0.31956279277801514, 0.6997244954109192, -0.6184013485908508, 0.1607637107372284),
(0.0, 0.0, 0.0, 0.0),
(0.0, 0.0, 0.0, 0.0),
(-0.4764614999294281, 0.41930121183395386, -0.5304596424102783, 0.5619461536407471),
(0.5574114918708801, 0.11609425395727158, 0.8202590346336365, 0.05467696115374565),
(0.0, 0.0, 0.0, 0.0),
(-0.43570396304130554, -0.42929166555404663, 0.5331853032112122, 0.5844519734382629),
(-0.6717790961265564, 0.018833067268133163, 0.7402865886688232, 0.01827508769929409),
(0.0, 0.0, 0.0, 0.0)
]


# abs_quats = rel2absquat(start_quat, new)
quats = []
quats.append(quat523)
for a in new:
	# print(a)
	# time.sleep(2)
	quats.append(a)

for q in quats:
	vector_array = quat2vector(q, cameraspace = False)
	canvas = np.zeros((1800, 1920, 3), np.uint8)
	canvas = vector2screen (vector_array, 50, (800,100,800), canvas)
	cv2.imshow("skeleton_quaternions",canvas)
	cv2.waitKey(0)
